import dlib, cv2, pickle,os
import matplotlib.pyplot as plt
import dlib, cv2,os
import numpy as np
from imutils.face_utils import FaceAligner
from . import supportFiles

from tqdm import tqdm
#from supportFiles import pose_predictor_model_location
#from supportFiles import face_recognition_model_location
#from supportFiles import configFile_location
#from supportFiles import modelFile_location

class FaceReco():

    number_of_object_count=0
    ## Constructor for the package
    def __init__(self):
        self.faces = list()
        self.name = list()

        self.labels = list()
        FaceReco.number_of_object_count = FaceReco.number_of_object_count+1
        self.serial_number = FaceReco.number_of_object_count
        posepre=supportFiles.pose_predictor_model_location()
        print(posepre)
        self.pose_predictor = dlib.shape_predictor(posepre)

        detect = supportFiles.face_recognition_model_location()
        self.face_encoder=dlib.face_recognition_model_v1(detect)
        print(detect)
        mdf = supportFiles.modelFile_location()
        self.modelFile = mdf

        conf = supportFiles.configFile_location()
        self.configFile = conf

@@ -75,21 +71,45 @@ def faceRecognitionTesting(self,faceAligned):
        score = np.linalg.norm(self.faces - np.array(face_descriptor), axis=1)
        imatches = np.argsort(score)
        score = score[imatches]
        return (self.name[imatches][:10].tolist())
        return (self.labels[imatches][:10].tolist())


    ## Method called by user for trainig of model
    ## Parameter accepted by user :  path of the folder which contains images for training
    def train_model(self,trainpath):
        for im in os.listdir(trainpath):
        for im in tqdm(os.listdir(trainpath)):
            faceAligned = self.faceDetection(os.path.join(trainpath,im))
            self.faces = self.faceRecognitionTrainig(faceAligned)
            self.name.append(im)
            self.labels.append(im)
        self.faces = np.array(self.faces)
        self.name = np.array(self.name)
        np.save(os.path.join(os.getcwd(),'face_repr.npy'), self.faces)
        np.save(os.path.join(os.getcwd(),'labels.npy'), self.name)
        self.labels = np.array(self.labels)
        folderpath = os.path.join(os.getcwd(),"Model_Object_"+str(self.serial_number))
        if(not(os.path.isdir(folderpath))):
            os.mkdir(folderpath)
        np.save(os.path.join(folderpath,'face_repr.npy'), self.faces)
        np.save(os.path.join(folderpath,'labels.npy'), self.labels)
        print("Model files has been stored at " + folderpath)

    ## Method called by user for loading the existing model which has been created by this package and stored at specified location
    ## Parameter : path of the folder where model files are stored
    ## return : return True if the model files exist at the specified location else False
    def load_model(self,folderpath):
        if(os.path.exists(folderpath)):
            temp_face = os.path.join(folderpath,'face_repr.npy')
            temp_labels = os.path.join(folderpath,'labels.npy')
            if(os.path.exists(temp_face) and os.path.exists(temp_labels)):
                self.faces = np.load(temp_face)
                self.labels = np.load(temp_labels)
                return True
            else:
                print("Model files cannot be found..\n")
                print("Please provide the path of the folder where the model file(s) (face_repr.npy and labels.npy) are stored!! ")
                return False
        else:
            print("Model files cannot be found..\n")
            print("Please provide a valid path!!")
            return False


    ## Method called by user for testing of the model
    ## Parameter : path of the given for testing
